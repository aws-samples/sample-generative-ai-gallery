AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Bedrock Gallery Admin Panel

Parameters:
  Stage:
    Type: String
    Default: prod
    Description: Deployment stage
  AdminBucketName:
    Type: String
    Default: bedrock-gallery-admin-prod-897729106229
    Description: Existing S3 bucket name for admin panel

Globals:
  Function:
    Timeout: 30
    Runtime: python3.9
    Environment:
      Variables:
        FLASK_ENV: production

Resources:
  # Lambda function for API
  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "bedrock-gallery-admin-api-${Stage}"
      CodeUri: 
        Bucket: !Ref AdminBucketName
        Key: lambda/lambda_api.zip
      Handler: lambda_api.lambda_handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /api/{proxy+}
            Method: ANY
            RestApiId: !Ref ApiGateway
        ApiRootEvent:
          Type: Api
          Properties:
            Path: /api
            Method: ANY
            RestApiId: !Ref ApiGateway
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:ListBucket
                - s3:DeleteObject
              Resource:
                - "arn:aws:s3:::amazon-bedrock-gallery-global-f0154ca1"
                - "arn:aws:s3:::amazon-bedrock-gallery-global-f0154ca1/*"
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:DeleteItem
              Resource:
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ddb-amazon-bedrock-gallery-base-resource"

  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "bedrock-gallery-admin-api-${Stage}"
      StageName: !Ref Stage
      Cors:
        AllowMethods: "'GET,POST,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  # CloudFront Origin Access Control
  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "bedrock-gallery-admin-oac-${Stage}"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          # S3 origin for frontend
          - Id: S3Origin
            DomainName: !Sub "${AdminBucketName}.s3.amazonaws.com"
            S3OriginConfig:
              OriginAccessIdentity: ""
            OriginAccessControlId: !Ref OriginAccessControl
            OriginPath: /frontend
          # API Gateway origin
          - Id: ApiOrigin
            DomainName: !Sub "${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com"
            CustomOriginConfig:
              HTTPPort: 443
              OriginProtocolPolicy: https-only
            OriginPath: !Sub "/${Stage}"
        
        Enabled: true
        DefaultRootObject: index.html
        
        # Default behavior for frontend
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # Managed-CachingOptimized
        
        # API behavior
        CacheBehaviors:
          - PathPattern: /api/*
            TargetOriginId: ApiOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
            CachedMethods:
              - GET
              - HEAD
            Compress: true
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad  # Managed-CachingDisabled
            OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf  # Managed-CORS-S3Origin
        
        PriceClass: PriceClass_100
        
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300

  # S3 bucket policy for CloudFront access
  AdminBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AdminBucketName
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${AdminBucketName}/frontend/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"

Outputs:
  ApiUrl:
    Description: API Gateway URL
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
    Export:
      Name: !Sub "${AWS::StackName}-ApiUrl"
  
  CloudFrontUrl:
    Description: CloudFront Distribution URL
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"
    Export:
      Name: !Sub "${AWS::StackName}-CloudFrontUrl"
  
  AdminBucket:
    Description: S3 Bucket for Admin Panel
    Value: !Ref AdminBucketName
    Export:
      Name: !Sub "${AWS::StackName}-AdminBucket"
